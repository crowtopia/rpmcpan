#!/usr/bin/env perl

package RPM::CPAN;

use v5.10;
use strict;
use warnings;
use utf8;
use HTTP::Tiny;
use Module::CoreList;
use Getopt::Long;
use File::Spec::Functions qw(catfile splitpath splitdir canonpath);
use File::Find;
use Archive::Tar;
use File::Basename qw(basename dirname);
use POSIX qw(strftime);
use File::Path qw(make_path remove_tree);
use List::Util qw(first);
use Cwd;

our $VERSION = '1.0';
my $true;

BEGIN {
    my $pkg = first { eval "require $_" } qw(JSON::XS JSON::PP JSON);
    die "Could not load JSON parser\n" unless $pkg;
    $pkg->import(qw(decode_json encode_json));
    $true = $pkg->true;
}

sub new {
    my ($class, %p) = @_;
    $p{verbose}  //= 0;
    $p{config}   //= File::Spec->catfile(qw(etc dists.json));
    $p{repo}     //= 'repo';
    $p{no_perl}  //= delete $p{'no-perl'} // 0;
    $p{packager} //= do {
        require User::pwent;
        my $sysname = $ENV{USER};
        my $name = (User::pwent::getpwnam($sysname)->gecos)[0] || $sysname;
        if (eval "require Encode::Locale") {
            require Encode;
            $name = Encode::decode( locale => $name );
        }
        require Sys::Hostname;
        my $email = "$sysname@" . Sys::Hostname::hostname();
        "$name <$email>";
    };

    if (my $perlver = $p{version}) {
        my @parts = split /[.]/ => $perlver;
        push @parts => 0 if @parts < 3;
        $p{version} = version->new(join '.' => @parts);
    } else {
        $p{version} = $^V;
    }

    $p{exitval}  = 0;
    ($p{plv}     = $p{version}->normal) =~ s/^v?5[.](\d+).+/5$1/;
    $p{date}     = strftime("%a %b %d %Y", localtime);
    $p{http}     = HTTP::Tiny->new(agent => "rpmcpan/$VERSION");
    $p{prefix} //= "/usr/local/perl$p{plv}";
    $p{perl}     = "$p{prefix}/bin/perl";
    $p{corelist} = $Module::CoreList::version{ $p{version}->numify };

    return bless \%p => $class;
}

sub go {
    my $class = shift;
    Getopt::Long::Configure (qw(bundling));
    Getopt::Long::GetOptionsFromArray(
        \@_,
        \my %opts,
        'version=s',
        'prefix|f=s',
        'all',
        'verbose|v+',
        'repo|r=s',
        'config|c=s',
        'packager|p=s',
        'dist|d=s@',
        'die!',
        'no-perl',
    );
    return $class->new(%opts)->run;
}

sub vent {
    my $self = shift;
    die  'ERROR: ', @_, "\n" if $self->{die};
    warn 'ERROR: ', @_, "\n";
    return 0
}

sub run {
    my $self = shift;
    my $dists = decode_json do {
        open my $fh, '<:raw', $self->{config}
            or die "Cannot open $self->{config}: $!\n";
        local $/;
        <$fh>;
    };
    $self->{dists} = $dists;

    remove_tree $self->{repo} if $self->{all};
    make_path $self->{repo};

    # First, build Perl.
    return 1 unless $self->build_perl;

    # Make sure we are building with the target Perl.
    die "$self->{perl} does not exist; have you built it?\n"
        unless -e $self->{perl};
    die "Perl version " . $self->{version}->numify
        . " not listed in \$Module::CoreList::version\n" unless $self->{corelist};

    say "Building RPMs for Perl $self->{version} (perl$self->{plv})\n"
        if $self->{verbose};

    if (my $list = $self->{dist}) {
        # Specific list of distributions requested.
        for my $dist (@{ $list }) {
            my $spec = $dists->{$dist}
                or die "$dist not listed in $self->{config}\n";
            $self->{exitval}++ unless $self->build($dist, $spec);
        }
    } else {
        # Iterate over complete list of distributions.
        while (my ($dist, $spec) = each %{ $dists }) {
            $self->{exitval}++ unless $self->build($dist, $spec);
        }
    }
    if ($self->{exitval}) {
        say "Unable to build all RPMs for Perl $self->{version} (perl$self->{plv})\n";
    } else {
        say "Done building RPMs for Perl $self->{version} (perl$self->{plv})\n";
    }
    return $self->{exitval};
}

sub call {
    my ($self, $api, $path) = @_;
    my $uri = "http://api.metacpan.org/v0/$api/$path";
    say "  - Calling $uri" if $self->{verbose} > 1;
    my $res = $self->{http}->get($uri);
    return $self->vent(
        "Request for $api/$path failed: $res->{status} $res->{reason}"
    ) unless $res->{success};
    return decode_json $res->{content};
}

sub get_modules {
    my ($self, $rel) = @_;
    say "  - Searching $rel->{name} for modules" if $self->{verbose} > 1;
    my $body = encode_json +{
        query  => { match_all => {} },
        size   => 5000,
        filter => {
            and => [
                { term   => { release    => $rel->{name}   } },
                { term   => { author     => $rel->{author} } },
                { term   => { indexed    => $true          } },
                { term   => { authorized => $true          } },
                { exists => { field      => 'module.name'  } },
            ],
        },
        fields => [ qw(module.name module.version) ],
    };
    my $res = $self->{http}->post(
        'http://api.metacpan.org/v0/file/_search',
        { content => $body }
    );
    return $self->vent(
        "Request for file/_search failed: $res->{status} $res->{reason}"
    ) unless $res->{success};
    return decode_json $res->{content};
}

sub provides {
    my ($self, $rel) = @_;
    # Just use the release list if we have them.
    my %seen;
    my $pl = "perl$self->{plv}";
    if (my $p = $rel->{metadata}{provides}) {
        return [map {
            "$pl($_)" . ($p->{$_}{version} ? do {
                (my $v = $p->{$_}{version}) =~ s/^v//;
                " = $v";
            } : '')
        } grep { !$seen{$_}++ } keys %{ $p }];
    }

    # Otherwise, ask metacpan for a list.
    my $mods = $self->get_modules($rel) or return 0;

    # Each hit contains scalars or arrays of modules. Standardize on arrays.
    return [map {
        my $f = $_->{fields};
        my $mods = ref $f->{'module.name'}
            ? $f->{'module.name'}
            : [$f->{'module.name'}];
        my $vers = ref $f->{'module.version'}
            ? $f->{'module.version'}
            : [$f->{'module.version'}];
        map {
            "$pl($mods->[$_])" . ($vers->[$_] ? do {
                (my $v = $vers->[$_]) =~ s/^v//;
                " = $v";
            } : '')
        } 0..$#$mods;
    }  grep { !$seen{ $_->{fields}{'module.name'} }++ } @{ $mods->{hits}{hits} }];
}

sub download {
    my ($self, $rel) = @_;
    my $url  = $rel->{download_url};
    my $tgz  = basename +$rel->{archive};
    my $file = catfile 'SOURCES', $tgz;
    return $file if -e $file;

    say "- Downloading $tgz" if $self->{verbose};
    my $res = $self->{http}->mirror($url, $file);
    return $self->vent(
        "Download of $url failed: $res->{status} $res->{reason}"
    ) unless $res->{success};
    if ($self->{verbose} > 1) {
        say $res->{status} == 304
            ? "  - $file is up-to-date"
            : "  - Saved to $file";
    }
    return $file;
}

sub is_built {
    my ($self, $mod) = @_;
    my $rpm = join '-', "perl$self->{plv}", @{ $mod }{qw(distribution version)};
    say "  - Looking for $rpm" if $self->{verbose} > 1;
    my $match = 0;
    find sub { $match += /^\Q$rpm\E-\d/ }, $self->{repo};
    return $match > 0;
}

sub inspect {
    my ($self, $tgz) = @_;
    say "- Inspecting $tgz" if $self->{verbose} > 1;
    my %info;
    for my $file ( Archive::Tar->list_archive($tgz) ) {
        if (!$info{arch} && $file =~ /[.](?:[ch]|xs|inl)$/i) {
            $info{arch} = 1;
            last if $info{use_mb};
            next;
        }
        if (
            !$info{use_mb} && basename($file) eq 'Build.PL'
            && splitdir(canonpath +(splitpath $file)[1]) <= 1
        ) {
            $info{use_mb} = 1;
            last if $info{arch};
            next;
        }
    }
    return \%info;
}

my %label_for = (
    # The following list of license strings are valid:
    agpl_3          => 'Affero General Public License 3.0',
    apache_1_1      => 'Apache Software License 1.1',
    apache_2_0      => 'Apache Software License 2.0',
    artistic_1      => 'Artistic',
    artistic_2      => 'Artistic 2.0',
    bsd             => 'BSD License (three-clause)',
    freebsd         => 'FreeBSD License (two-clause)',
    gfdl_1_2        => 'GNU Free Documentation License 1.2',
    gfdl_1_3        => 'GNU Free Documentation License 1.3',
    gpl_1           => 'GPLv1',
    gpl_2           => 'GPLv2',
    gpl_3           => 'GPLv3',
    lgpl_2_1        => 'LGPLv2',
    lgpl_3_0        => 'LGPLv3',
    mit             => 'MIT',
    mozilla_1_0     => 'MPLv1.0',
    mozilla_1_1     => 'MPLv1.1',
    openssl         => 'OpenSSL',
    perl_5          => 'GPL+ or Artistic',
    qpl_1_0         => 'QPL',
    ssleay          => 'Original SSLeay License',
    sun             => 'SISSL',
    zlib            => 'zlib',

    # The following license strings are also valid and indicate other
    # licensing not described above:
    open_source     => 'OSI-Approved',
    restricted      => 'Non-distributable',    # XXX Warn?
    unrestricted    => 'Distributable',
#   unknown         => 'CHECK(Distributable)', # XXX Warn?
);

sub license_for {
    my ($self, $rel) = @_;
    say "- Finding license for $rel->{distribution}" if $self->{verbose} > 1;
    return $label_for{ $rel->{license} } || $label_for{perl_5}
        unless ref $rel->{license};
    return join ' or ' => map {
        $label_for{$_} || $label_for{perl_5}
    } @{ $rel->{license} };
}

sub write_spec {
    my ($self, $rel, $spec, $tgz) = @_;
    my $specfile = File::Spec->catfile('etc', "$rel->{distribution}.spec");
    if (-e $specfile) {
        say "- Using $specfile" if $self->{verbose};
        return $specfile;
    }

    $specfile = File::Spec->catfile('SPECS', "$rel->{distribution}.spec");
    my $license = $self->license_for($rel);
    my $url = $rel->{metadata}{'meta-spec'}{url}
          || "https://metacpan.org/release/$rel->{name}";
    my $info = $self->inspect($tgz);
    my $src  = basename $rel->{archive};
    my $found = $self->provides($rel) or return 0;
    my @provides = (@{ $spec->{provides} || [] }, @{ $found });
    my @patches = @{ $spec->{patch} || [] };
    my $descr = $rel->{abstract} || $rel->{metadata}{abstract} || 'unknown';

    say "- Generating $specfile" if $self->{verbose};
    open my $fh, '>:encoding(UTF-8)', $specfile or return $self->vent(
        "Cannot open $specfile: $!"
    );

    print $fh qq{Name:           perl$self->{plv}-$rel->{distribution}
Version:        $rel->{version}
Release:        1.%{dist}
Summary:        $descr
License:        $license
Group:          Development/Libraries
URL:            $url
Source0:        $src},
    (map { "\nPatch$_:         $patches[$_]" } 0..$#patches), qq{
BuildRoot:      %{_tmppath}/%{name}-%{version}-%{release}-root-%(%{__id_u} -n)
AutoReqProv:    no
}, ($info->{noarch} ? "\nBuildArch:      noarch" : ()), qq{
BuildRequires:  perl$self->{plv}},
    ( map {; "\nBuildRequires:  $_" } @{ $spec->{build_requires} } ), qq{
Requires:       perl$self->{plv}},
    ( map {; "\nRequires:       $_" } @{ $spec->{requires} } ),
    ( map {; "\nProvides:       $_" } @provides ), qq{

%description
$descr

%prep
%setup -q -n $rel->{name}},
    ( map { "\n%patch$_ -p1" } 0..$#patches ), qq{

%build
%{__perl} }, ($info->{use_mb} ? (
    "Build.PL --installdirs=vendor" . ($info->{noarch} ? '' : ' --optimize="$RPM_OPT_FLAGS"')
    . "\n./Build"
) : (
    "Makefile.PL INSTALLDIRS=vendor" . ($info->{noarch} ? '' : ' OPTIMIZE="$RPM_OPT_FLAGS"')
    . "\nmake %{?_smp_mflags}"
)), qq{

%install
rm -rf \$RPM_BUILD_ROOT
}, ($info->{use_mb} ? (
    "./Build install --destdir=\$RPM_BUILD_ROOT create_packlist=0"
) : (
    "make pure_install PERL_INSTALL_ROOT=\$RPM_BUILD_ROOT\n",
    "find \$RPM_BUILD_ROOT -type f -name .packlist -exec rm -f {} \\;"
)), qq{
find \$RPM_BUILD_ROOT -depth -type d -exec rmdir {} 2>/dev/null \\;
%{_fixperms} \$RPM_BUILD_ROOT/*

%check
}, ($info->{use_mb} ? "./Build test" : "make test" ), qq{

%clean
rm -rf \$RPM_BUILD_ROOT

%files
%defattr(-,root,root,-)
%{_prefix}/*

%changelog
* $self->{date} $self->{packager} $rel->{version}-1
- Specfile autogenerated by rpmcpan $VERSION.
};
    close $fh;
    return $specfile;
}

sub build_perl {
    my $self = shift;
    return 1 if $self->{no_perl};

    (my $v = $self->{version}->normal) =~ s/^v//;
    my $pl = File::Spec->catfile($self->{prefix}, qw(bin perl));

    my $rpm = "perl$self->{plv}-$v";
    say "Looking for $rpm" if $self->{verbose} > 1;
    my $rpmfile;
    find sub { $rpmfile = $File::Find::name if /^\Q$rpm\E-\d/ }, $self->{repo};

    if ($rpmfile) {
        say "Perl $self->{version} already built" if $self->{verbose};

        # Do we need to install it?
        my $restart = 0;
        if (!-e $pl) {
            $restart = 1;
            say "Installing $rpmfile" if $self->{verbose};
            return $self->vent("Could not install $rpmfile") unless system(
                qw(sudo rpm -Uvh), $rpmfile
            ) == 0;
        }

        # Do we need to switch to it?
        if ($restart || $self->{version} != $^V) {
            say "Restarting with Perl $self->{version}\n" if $self->{verbose};
            exec { $pl } $pl, $0, '--no-perl', @ARGV;
            die "Could not exec $pl: $!\n";
        }

        # We good.
        return 1;
    }

    # Put together the release information for this version.
    say "Building Perl $self->{version}" if $self->{verbose};
    my $archive = "perl-$v.tar.bz2";
    my $rel = {
        name         => 'perl',
        version      => $v,
        download_url => "http://cpan.metacpan.org/src/$archive",
        archive      => $archive,
    };

    # Download and build Perl
    my $specfile = File::Spec->catfile(qw(etc perl.spec));
    $self->download($rel) or return 0;
    $self->rpmbuild($rel, $specfile, {
        install_from_yum =>  do {
            open my $fh, '<:encoding(UTF-8)', $specfile
                or die "Cannot open $specfile: $!\n";
            my @reqs;
            while (<$fh>) {
                next unless s/^(?:Build)?Requires:\s+//i;
                (my $dep = $_) =~ s/\s+$//;
                push @reqs => $dep;
            }
            \@reqs;
        },
    }) or return 0;

    # Restart.
    say "Perl $self->{version} built; restarting with that version\n"
        if $self->{verbose};
    exec { $pl } $pl, $0, '--no-perl', @ARGV;
    die "Could not exec $pl: $!\n";
}

sub rpmbuild {
    my ($self, $rel, $specfile, $spec) = @_;

    say "- Building $rel->{name}" if $self->{verbose};

    if ( my $to_install = $spec->{install_from_yum} ) {
        say '- Installing build dependencies: ', join ', ', @{ $to_install }
            if $self->{verbose};
        system(
            qw(sudo yum install -y),
            ($self->{verbose} > 1 ? () : '--quiet'),
            @{ $to_install }
        ) == 0 or return $self->vent("Dependency installation failed");
    }

    my @params = (
        '--define' => "version $rel->{version}",
        '--define' => 'dist ' . scalar time,
        @{ $self->{params} ||= [
            '--define' => "__perl $self->{perl}",
            '--define' => "plv $self->{plv}",
            '--define' => "_prefix $self->{prefix}",
            '--define' => '_topdir ' . cwd,
            '--define' => "sitemandir $self->{prefix}/man/site_perl",
            '--define' => "vendormandir $self->{prefix}/man/vendor_perl",
        ] },
    );

    # Set up environment variables.
    local %ENV = (
        %ENV,
        PERL_MM_USE_DEFAULT => 1,
        %{ $spec->{environment} || {} }
    );

    system(
        qw(rpmbuild -ba),
        ($self->{verbose} < 2 ? '--quiet' : ()),
        @params, $specfile
    ) == 0 or return $self->vent("Build failed");

    # Find all new RPMs and put them into the repo directory.
    my (@rpms, @debugrpms);
    say "- Collecting and installing $rel->{name} RPMs" if $self->{verbose};
    find { no_chdir => 1, wanted => sub {
        return unless /[.]rpm$/;
        my $dest = File::Spec->catfile($self->{repo}, basename $_);
        rename $_, $dest;
        if ($dest =~ /-debuginfo-/) {
            push @debugrpms => $dest;
        } else {
            push @rpms => $dest;
        }
    } }, 'RPMS';

    return $self->vent("No RPMs found after building $rel->{name}")
        unless @rpms;

    # Don't install mod_perl; multiple versions stomp on each other.
    # But do test the RPM to make sure it has no conflicts.
    my @test = $rel->{name} eq 'mod_perl' ? ('--test') : ();

    system(
        qw(sudo rpm -Uvh), @test, @rpms
    ) == 0 or do {
        unlink @rpms, @debugrpms;
        return $self->vent('Could not install ', join ', ', @rpms);
    };

    return 1;
}

my %seen = (perl => 1);

sub build {
    my ($self, $dist, $spec) = @_;
    return 1 if $seen{$dist}++;
    say "Processing $dist" if $self->{verbose};

    # Get the latest release.
    my $rel = $self->call(release => $dist) or return 0;
    say "- Version: $rel->{version}" if $self->{verbose};

    # Grab pre-specified dependencies.
    my $requires = $spec->{requires} ||= [];
    my %exclude_requires = map { $_ => 1 }
        @{ $spec->{exclude_requires} || [] };
    my $build_requires = $spec->{build_requires} ||= [];
    my %exclude_build_requires = map { $_ => 1 }
        @{ $spec->{exclude_build_requires} || [] };

    # Set aside pre-specified build dependencies to be installed from Yum.
    if (my @req = @{ $build_requires }) {
        $spec->{install_from_yum} = \@req;
    }

    # Let's look at its dependencies.
    my (%mod_seen, %dist_seen, @failed);
    my $corelist = $self->{corelist};
    if ( my @deps = ( @{ $spec->{missing_prereqs} || []}, @{ $rel->{dependency} } ) ) {
        say "- Checking dependencies" if $self->{verbose};
        for my $dep (@deps) {
            # Skip excluded, development, conflicting, or seen dependencies.
            next if $exclude_requires{ $dep->{module} }
                && $dep->{phase} eq 'runtime';
            next if $exclude_build_requires{ $dep->{module} }
                && $dep->{phase} ne 'runtime';
            next if $mod_seen{ $dep->{module} }++;
            next if $dep->{phase} eq 'develop';
            next if $dep->{relationship} eq 'conflicts'; # XXX Add to spec file?

            say "  - $dist $dep->{relationship} $dep->{module} for its $dep->{phase} phase"
                if $self->{verbose} > 1;

            if ( exists $corelist->{ $dep->{module} } ) {
                # It's in core. Is it new enough?
                if (
                    !$dep->{version}
                    || version->parse($dep->{version}) <= version->parse($corelist->{ $dep->{module} } || 0)
                ) {
                    say "  - $dep->{module} in core; skipping" if $self->{verbose} > 1;
                    next;
                }
            }

            my $mod = $self->call( module => $dep->{module} ) or do {
                push @failed => $dep->{module};
                next;
            };

            my $depdist = $mod->{distribution};
            if ($depdist eq 'perl') {
                say "  - $dep->{module} in core; skipping" if $self->{verbose} > 1;
                next;
            }

            # Build this one.
            $self->build( $depdist, $self->{dists}{$depdist} || {} ) or do {
                push @failed => $depdist;
                $self->{exitval}++;
            };

            # Record it as a dependency.
            if ($dep->{phase} eq 'runtime') {
                # It's a runtime dependency; require the module.
                push @{ $requires } => "perl$self->{plv}($dep->{module})"
                    . ($dep->{version} ? " >= $dep->{version}" : '')
            } else {
                # It's a build dependency; require the distribution.
                push @{ $build_requires } => "perl$self->{plv}-$depdist"
                    unless $dist_seen{ $depdist }++;
            }
        }
    }

    # Handle failures.
    if (@failed) {
        say "- Cannot build $dist: Dependencies failed:";
        say "  - $_" for @failed;
        print "\n" if $self->{verbose};
        return 0;
    }

    # Do we already have a RPM for this release?
    if ( $self->is_built($rel) ) {
        say "- $dist-$rel->{version} already built; skipping\n" if $self->{verbose};
        return 1;
    }

    # Get the source file.
    my $tarball = $self->download($rel) or return 0;

    # Write the spec file.
    my $specfile = $self->write_spec($rel, $spec, $tarball) or return 0;

    # Create the RPM.
    $self->rpmbuild($rel, $specfile, $spec) or return 0;

    print "\n" if $self->{verbose};
    return 1;
}

1;

package main;
exit RPM::CPAN->go(@ARGV);
